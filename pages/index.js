import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link';
import { useState, useEffect } from 'react';
import styles from '../styles/Home.module.css'

export default function Home() {
    const [ userInput, setUserInput ] = useState("");
    const [ reference, setReference ] = useState("");
    const [ loading, setLoading ] = useState(false);
    const [ assertions, setAssertions ] = useState();
    const [ links, setLinks ] = useState();
    const linkArray = [
        { title: "Hello", snippet: "Hi", link: "linklinklink" },
        { title: "Hello", snippet: "Hi", link: "linklinklink" },
    ];
    const handleCite = async (assertion, i) => {
        setLoading(true);
        const response = await fetch("/api/generate", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                assertion: assertion
            }),
        });
        const data = await response.json();
        console.log("Data result: ",data.result);
        return data.result

    }

    useEffect(() => {
        console.log(links);
    }, [links]);

    const handleAreaInput = (event) => {
        const textarea = event.target;
        textarea.style.height = "auto";
        textarea.style.height = `${textarea.scrollHeight}px`;
    };
    const handleGetAssertions = async () => {

        try {
            setLinks(null);
            setLoading(true)
            const response = await fetch("/api/findAssertions", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    text: userInput,
                }),
            });
            const data = await response.json();
            setAssertions(data.result);
            data.result.map(async assertion => {
                const cite = await handleCite(assertion)
                await setLinks((prevLinks) =>
                    prevLinks ? [...prevLinks, cite[0]] : [cite[0]]
                );
            });
            setLoading(false);
            console.log(data);
        } catch (error) {
            setLoading(false)
        }
    }
  return (
      <div className={styles.container}>
          <Head>
              <title>Cite AI</title>
              <meta name="description" content="Generated by create next app" />
              <link rel="icon" href="/favicon.ico" />
              <script
                  type="module"
                  src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.esm.js"
              ></script>
              <script
                  nomodule
                  src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.js"
              ></script>
          </Head>
          <div className={styles.app}>
              {loading && <div className={styles.loading}></div>}

              {assertions && (
                  <div className={styles.assertions}>
                      <p>
                          {assertions.map((e, i) => {
                              return (
                                  <p className={styles.assertion} key={i}>
                                      {e}{" "}
                                      <span className={styles.cite}>{i + 1}</span>
                                  </p>
                              );
                          })}
                      </p>
                  </div>
              )}
              {!loading && links && (
                  <div className={styles.reference}>
                      {links.map((e, i) => {
                          return (
                              <div className={styles.source}>
                                  <div className={styles.sourceTop}>
                                      <h4>{e.title}</h4>
                                      <p className={styles.sourceCite}>{i + 1}</p>
                                  </div>

                                  <p className={styles.sourceSnippet}>
                                      {" "}
                                      <em>{e.snippet}</em>
                                  </p>
                                  <a
                                      className={styles.sourceLink}
                                      href={e.link}
                                      target="_blank"
                                  >
                                      {e.link}
                                  </a>
                              </div>
                          );
                      })}
                  </div>
              )}
              <div className={styles.field}>
                  <textarea
                      value={userInput}
                      onInput={(e) => setUserInput(e.target.value)}
                      className={styles.textarea}
                      rows="1"
                      onChange={handleAreaInput}
                  ></textarea>
                  <p onClick={handleGetAssertions}>Send</p>
              </div>
          </div>
      </div>
  );
}